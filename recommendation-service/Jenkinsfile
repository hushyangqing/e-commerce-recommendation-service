pipeline {
    agent any
    
    environment {
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        AWS_REGION = 'us-west-1'
        ECR_REPO = 'e-commerce-recommendation-service'
        IMAGE_TAG = "${BUILD_NUMBER}"
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        TEST_DB_PORT = '3307'
        TEST_APP_PORT = '8080'
    }
    
    stages {

        stage('Test Docker Access') {
            steps {
                sh '''
                    whoami
                    groups
                    docker ps
                '''
            }
        }

        stage('Setup Test Environment') {
            steps {
                script {
                    // Start MySQL container
                    sh '''
                        docker run -d --name test-mysql \
                        -e MYSQL_ROOT_PASSWORD=test \
                        -e MYSQL_DATABASE=recommendation_test \
                        -p ${TEST_DB_PORT}:3307 \
                        mysql:8.0
                    '''

                    // Wait for MySQL to be ready
                    sh '''
                        until docker exec test-mysql mysqladmin ping -h "127.0.0.1" --silent; do
                            echo "Waiting for database connection..."
                            sleep 2
                        done
                    '''

                    writeFile file: 'src/main/resources/application-jmeter-test.properties', text: """
                        spring.datasource.url=jdbc:mysql://localhost:${TEST_DB_PORT}/recommendation_test
                        spring.datasource.username=root
                        spring.datasource.password=test
                        spring.sql.init.mode=always
                        spring.jpa.hibernate.ddl-auto=update
                        spring.sql.init.schema-locations=classpath:jmeter-schema.sql
                        spring.sql.init.data-locations=classpath:jmeter-test-data.sql
                        jwt.secret=test-secret
                        jwt.expiration=3600000
                    """

                    sh '''
                        sed -i '/<elementProp name="BASE_URL"/,/<\\/elementProp>/ s|<stringProp name="Argument.value">.*</stringProp>|<stringProp name="Argument.value">http://localhost:${TEST_APP_PORT}</stringProp>|' src/test/jmeter/*.jmx
                    '''
                }
            }
        }

        
        stage('Create Properties File') {
            steps {
                script {
                    def dbUrl = sh(script: "aws ssm get-parameter --name '/recommendation-service/prod/db_url' --with-decryption --query Parameter.Value --output text", returnStdout: true).trim()
                    def dbUsername = sh(script: "aws ssm get-parameter --name '/recommendation-service/prod/db_username' --with-decryption --query Parameter.Value --output text", returnStdout: true).trim()
                    def dbPassword = sh(script: "aws ssm get-parameter --name '/recommendation-service/prod/db_password' --with-decryption --query Parameter.Value --output text", returnStdout: true).trim()
                    def jwtSecret = sh(script: "aws ssm get-parameter --name '/recommendation-service/prod/jwt_secret' --with-decryption --query Parameter.Value --output text", returnStdout: true).trim()
                    
                    sh """
                        cat application.properties.template | \
                        sed 's|\${DB_URL}|${dbUrl}|g' | \
                        sed 's|\${DB_USERNAME}|${dbUsername}|g' | \
                        sed 's|\${DB_PASSWORD}|${dbPassword}|g' | \
                        sed 's|\${JWT_SECRET}|${jwtSecret}|g' > src/main/resources/application.properties
                    """
                }
            }
        }
        
        stage('Build & Test') {
            steps {
                sh 'mvn clean verify -Pjmeter-tests'
            }
            post {
                always {
                    sh 'docker rm -f test-mysql || true'
                }
            }
        }
        
        stage('Build & Push Docker Image') {
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                    
                    def dockerImage = docker.build("${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}")
                    
                    dockerImage.push()
                    dockerImage.push('latest')
                }
            }
        }
        
        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    sh """
                        sed -i 's|\${DOCKER_REGISTRY}|${ECR_REGISTRY}|g' k8s/deployment.yaml
                        sed -i 's|\${IMAGE_NAME}|${ECR_REPO}|g' k8s/deployment.yaml
                        sed -i 's|\${IMAGE_TAG}|${IMAGE_TAG}|g' k8s/deployment.yaml
                    """
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                withKubeConfig([credentialsId: 'eks-kubeconfig']) {
                    sh """
                        kubectl apply -f k8s/configmap.yaml
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                    """
                }
            }
        }
    }
}