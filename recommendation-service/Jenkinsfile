pipeline {
    agent any
    
    environment {
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        AWS_REGION = 'us-west-1'
        ECR_REPO = 'e-commerce-recommendation-service'
        IMAGE_TAG = "${BUILD_NUMBER}"
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        TEST_DB_PORT = '3307'
        TEST_APP_PORT = '8090'
    }
    
    stages {

        stage('Test Docker Access') {
            steps {
                sh '''
                    whoami
                    groups
                    docker ps
                '''
            }
        }


        stage('Setup Test Environment') {
            steps {
                script {
                    // Start MySQL container
                    sh '''
                        docker run -d --name test-mysql \
                        -e MYSQL_ROOT_PASSWORD=test \
                        -e MYSQL_DATABASE=recommendation_test \
                        -p ${TEST_DB_PORT}:3307 \
                        mysql:8.0 
                    '''

                    // Wait for MySQL to be ready
                    sh '''
                        until docker exec test-mysql mysqladmin ping -h "127.0.0.1" --silent; do
                            echo "Waiting for database connection..."
                            sleep 2
                        done
                    '''

                    writeFile file: 'recommendation-service/src/main/resources/application-jmeter-test.properties', text: """
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:${TEST_DB_PORT}/recommendation_test?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
spring.datasource.username=root
spring.datasource.password=test
spring.sql.init.mode=always
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.schema-locations=classpath:jmeter-schema.sql
spring.sql.init.data-locations=classpath:jmeter-test-data.sql
jwt.secret=test-secret
jwt.expiration=3600000
"""

                    writeFile file: 'recommendation-service/src/test/resources/application-jmeter-test.properties', text: """
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:${TEST_DB_PORT}/recommendation_test?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
spring.datasource.username=root
spring.datasource.password=test
spring.sql.init.mode=always
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.schema-locations=classpath:jmeter-schema.sql
spring.sql.init.data-locations=classpath:jmeter-test-data.sql
jwt.secret=test-secret
jwt.expiration=3600000
logging.level.org.springframework.jdbc=DEBUG
logging.level.org.hibernate.SQL=DEBUG
"""

                }
            }
        }

            
        stage('Create Properties File') {
            agent{
                docker {
                    image 'amazon/aws-cli'
                    args "--entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-access-key-id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        def dbUrl = sh(script: "aws ssm get-parameter --name '/recommendation-service/prod/db_url' --with-decryption --query Parameter.Value --output text", returnStdout: true).trim()
                        def dbUsername = sh(script: "aws ssm get-parameter --name '/recommendation-service/prod/db_username' --with-decryption --query Parameter.Value --output text", returnStdout: true).trim()
                        def dbPassword = sh(script: "aws ssm get-parameter --name '/recommendation-service/prod/db_password' --with-decryption --query Parameter.Value --output text", returnStdout: true).trim()
                        def jwtSecret = sh(script: "aws ssm get-parameter --name '/recommendation-service/prod/jwt_secret' --with-decryption --query Parameter.Value --output text", returnStdout: true).trim()
                        
                writeFile file: 'recommendation-service/src/main/resources/application.properties', text: """
spring.application.name=recommendation-service
server.port=8090

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${dbUrl}?useSSL=false&serverTimezone=UTC
spring.datasource.username=${dbUsername}
spring.datasource.password=${dbPassword}
spring.sql.init.mode=always
spring.jpa.hibernate.ddl-auto=update

logging.level.org.hibernate=DEBUG
logging.level.org.springframework.jdbc=DEBUG

jwt.secret=${jwtSecret}
jwt.expiration=3600000
"""
                writeFile file: 'recommendation-service/k8s/configmap.yaml', text: """
apiVersion: v1
kind: ConfigMap
metadata:
  name: recommendation-service-config
data:
  DB_URL: ${dbUrl}
  DB_USERNAME: ${dbUsername}
  DB_PASSWORD: ${dbPassword}
  JWT_SECRET: ${jwtSecret}
"""
                    }
                }
            }
        }
            
        stage('Build & Test') {
            steps {
                sh '''
                    docker ps | grep test-mysql
                    cd recommendation-service
                    docker exec test-mysql mysql -uroot -ptest -e "SHOW DATABASES;"
                    mvn clean package -DskipTests
                '''
            }
            post {
                always {
                    sh 'docker rm -f test-mysql || true'
                }
            }
        }
        
        stage('Build & Push Docker Image') {
            agent{
                docker {
                    image 'amazon/aws-cli'
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-access-key-id',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            amazon-linux-extras install docker
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

                            docker buildx build --platform linux/amd64 \
                                -t ${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG} \
                                -f recommendation-service/Dockerfile \
                                recommendation-service \
                                --push
                        '''
                    }
                }
            }
        }
        
        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    sh """
                        cd recommendation-service
                        sed -i 's|\${DOCKER_REGISTRY}|${ECR_REGISTRY}|g' k8s/deployment.yaml
                        sed -i 's|\${IMAGE_NAME}|${ECR_REPO}|g' k8s/deployment.yaml
                        sed -i 's|\${IMAGE_TAG}|${IMAGE_TAG}|g' k8s/deployment.yaml
                    """
                }
            }
        }
        
        stage('Deploy to EKS') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-access-key-id',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            amazon-linux-extras install docker
                            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                            chmod +x kubectl
                            mv kubectl /usr/local/bin/
                            
                            aws eks update-kubeconfig --name recommendationServiceK8
                            
                            cd recommendation-service
                            
                            cat src/main/resources/application.properties
                            echo "ConfigMap"
                            cat k8s/configmap.yaml

                            kubectl apply -f k8s/configmap.yaml
                            kubectl apply -f k8s/deployment.yaml
                            kubectl apply -f k8s/service.yaml
                        '''
                }
            }
        }
    }
}